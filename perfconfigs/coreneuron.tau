BEGIN_INCLUDE_LIST
 void BBS::netpar_solve(double)
 void nrn_fixed_step_group(int) C
 void *nrn_fixed_step_group_thread(NrnThread *) C
 void *nrn_fixed_step_thread(NrnThread *) C
 void *nrn_fixed_step_lastpart(NrnThread *) C
 void nonvint(NrnThread *) C
 void NetParEvent::deliver(double, NetCvode *, NrnThread *)
 void nrn_spike_exchange(NrnThread *) C
 void nrnmpi_barrier() C
 void update(NrnThread *) C
 int nrnmpi_spike_exchange() C
 size_t nrnbbcore_write() C
 void write_nrnthread(const char *, NrnThread &, nrncore_CellGroup &) C
 void finitialize(void) C
 void nrn_finitialize(int, double) C
 double nrnmpi_dbl_allreduce(double, int) C
 void nrn_spike_exchange_init() C
 void write_nrnthread_task(const char *, nrncore_CellGroup *) C
 void nrnmpi_int_gather(int *, int *, int, int) C
 void NetParEvent::send(double, NetCvode *, NrnThread *)
 void nrn2ncs_outputevent(int, double) C
 void nrn_cleanup_presyn(PreSyn *) C
 void nrnmpi_spike_initialize() C
 void make_spike_type()
 void nrnmpi_int_gatherv(int *, int, int *, int *, int *, int) C
 void _nrn_state#(_NrnThread *, _Memb_list *, int) C
 void _nrn_cur__#(_NrnThread *, _Memb_list *, int) C
 void _nrn_jacob__#(_NrnThread *, _Memb_list *, int) C
 void *nrn_ms_bksub_through_triang(NrnThread *) C
 void *setup_tree_matrix(NrnThread *) C
 void nonvint(NrnThread *) C
 void nrn_rhs(NrnThread *) C
 void *nrn_ms_bksub(NrnThread *) C
 int nrnmpi_bgp_conserve(int, int) C
 void *nrn_ms_treeset_through_triang(NrnThread *) C
 void *nrn_ms_reduce_solve(NrnThread *) C
 void nrnmpi_wait(void **) C
 void nrn_lhs(NrnThread *) C
 void nrn_solve(NrnThread *) C
 void triang(NrnThread *) C
 void update(NrnThread *) C
 void bksub(NrnThread *) C
 int nrnmpi_bgp_single_advance(NRNMPI_Spike *) C
 void nrnmpi_send_doubles(double *, int, int, int) C
 void nrnmpi_postrecv_doubles(double *, int, int, int, void **) C
 void nrn_promote() C
 void nrnmpi_bgp_multisend(NRNMPI_Spike *, int, int *) C

# directly copied from coreneuron
int main(int, char **, char **)
void nrn_multithread_job(void *(*)(NrnThread *)) C
void BBS_netpar_solve(double) C
void ncs2nrn_integrate(double) C
void nrn_fixed_step_group_minimal(int) C
void *nrn_fixed_step_group_thread(NrnThread *) C
void *nrn_fixed_step_thread(NrnThread *) C
void nonvint(NrnThread *) C
void nrn_setup(const char *, const char *, int, int) C
void nrn_finitialize(int, double) C
void read_phase2(data_reader &, NrnThread &)
void *setup_tree_matrix_minimal(NrnThread *) C
void nrn_rhs(NrnThread *) C
void determine_inputpresyn()
void read_phase1(data_reader &, NrnThread &)
void nrn_solve_minimal(NrnThread *) C
void triang(NrnThread *) C
void bksub(NrnThread *) C
void output_spikes(const char *)
void nrn_lhs(NrnThread *) C
void update(NrnThread *) C
void deliver_net_events(NrnThread *) C
void nrn_deliver_events(NrnThread *) C
void nrn_cap_jacob(NrnThread *, Memb_list *) C
void nrn_spike_exchange(NrnThread *) C
int nrnmpi_spike_exchange() C
void _nrn_state#(_NrnThread *, _Memb_list *, int) C
void _nrn_cur__#(_NrnThread *, _Memb_list *, int) C
void _nrn_jacob__#(_NrnThread *, _Memb_list *, int) C

# for reporting in neurodamus
int flush__BinReportHelper() C
int savestate__BinReportHelper() C
int restorestate__BinReportHelper() C
void _net_receive__BinReportHelper(Point_process*, double*, double) C


# for ReportingLib
int AllReports::flush(double)
int Report::flush(double)
int AllReports::recData(double)
int Report::recData(double)
bool Report::isDueToReport(double)
bool Report::isDueToReport(double)
bool AllReports::isEmpty()
int CellData::fillMapping(float *, int)

int neurox::Branch::backwardEuler_handler(int const*, unsigned long)
void neurox::Branch::backwardEulerStep()
void neurox::Branch::setupTreeMatrix()

END_INCLUDE_LIST
